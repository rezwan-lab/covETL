# -*- coding: utf-8 -*-
"""WA_analysis_v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1afjtqHU8SUOuqqdTUmyG4vGQc-Bsxk5A
"""

import pandas as pd
import numpy as np
!pip install pivottablejs
from pivottablejs import pivot_ui
from IPython.display import HTML
from IPython.display import IFrame
import json, io

from google.colab import drive
drive.mount('/content/drive')

# df = pd.read_csv ("/content/drive/MyDrive/Colab Notebooks/WA108_IBDC_29.06.2022/IBDC-metadata.csv")

# df.columns

df = pd.read_table("/content/drive/MyDrive/BRICS_GISAID_India/BRICKS_GISAID_INDIA/nextstrain_metadata.tsv", low_memory=False, index_col=False)

df.columns

# df['substitutions'].astype(str)

df['total_substitutions'] = df['substitutions'].apply(lambda x: len(str(x).split(',')))

df.drop([ 'virus', 'age', 'sex', 'location', 'last_vaccinated', 'gisaid_epi_isl', 'genbank_accession', 'region', 'country', 'region_exposure', 'country_exposure', 'totalFrameShifts', 'missing', 'scorpio_support', 'scorpio_conflict', 'insertions', 'frameShifts', 'division_exposure', 'segment', 'length', 'host', 'originating_lab', 'authors', 'url',
       'title', 'paper_url', 'date_submitted', 'purpose_of_sequencing', 'lab_id', 'privateNucMutations.labeledSubstitutions', 'privateNucMutations.unlabeledSubstitutions', 'totalInsertions', 'totalNonACGTNs', 'nonACGTNs', 'substitutions', 'deletions', 'scorpio_call', 'note','privateNucMutations.totalLabeledSubstitutions',
       'privateNucMutations.totalUnlabeledSubstitutions',
       'privateNucMutations.totalPrivateSubstitutions'], axis=1, inplace=True)

df.columns

df.head(2)

Alpha = ['B.1.1.7', 'Q.']
Omicron = ['B.1.1.529']
BA1 = ['BA.1']
BA1X = ['BA.1.']
BA210 = ['BA.2.10']
BA2101 = ['BA.2.10.1']
BA212 = ['BA.2.12']
BA2121 = ['BA.2.12.1']
BA2X = ['BA.2.']
BA2 = ['BA.2']
BA3 = ['BA.3']
BA4 = ['BA.4']
BA5 = ['BA.5']
BA5X = ['BA.5., BF., BE.']
Beta = ['B.1.351']
Gamma = ['P.1']
Zeta = ['P.2']
Theta = ['P.3']
Eta = ['B.1.525']
Iota = ['B.1.526']
Kappa = ['B.1.617.1']
Lambda = ['C.37']
Mu = ['B.1.621']
Epsilon =['B.1.427','B.1.429']
Monitoring = ['AZ.5','C.1.2','B.1.630']
Delta = ['B.1.617.2', 'AY.']
Unassigned = ['Unassigned']
Other = Alpha+Omicron+BA1+BA1X+BA2+BA210+BA2101+BA212+BA2121+BA2X+BA3+BA4+BA5+BA5X+Beta+Gamma+Zeta+Theta+Eta+Iota+Kappa+Lambda+Mu+Epsilon+Monitoring+Delta+Unassigned

df.loc[(df.lineage.str.contains(
    '|'.join(Alpha))),  'WHO_Label'] = 'Alpha'
df.loc[(df.lineage.str.contains(
    '|'.join(Omicron))),  'WHO_Label'] = 'Omicron'
# df.loc[(df.lineage.str.contains(
#     '|'.join(Omicron1))),  'WHO_Label'] = df.lineage
df.loc[(df.lineage.str.contains(
    '|'.join(BA1))),  'WHO_Label'] = 'BA.1'
df.loc[(df.lineage.str.contains(
    '|'.join(BA1X))),  'WHO_Label'] = 'BA.1.X'
df.loc[(df.lineage.str.contains(
    '|'.join(BA2))),  'WHO_Label'] = 'BA.2'
df.loc[(df.lineage.str.contains(
    '|'.join(BA210))),  'WHO_Label'] = 'BA.2.10'
df.loc[(df.lineage.str.contains(
    '|'.join(BA2101))),  'WHO_Label'] = 'BA.2.10.1'
df.loc[(df.lineage.str.contains(
    '|'.join(BA212))),  'WHO_Label'] = 'BA.2.12'
df.loc[(df.lineage.str.contains(
    '|'.join(BA2121))),  'WHO_Label'] = 'BA.2.12.1'
df.loc[(df.lineage.str.contains(
    '|'.join(BA2X))),  'WHO_Label'] = 'BA.2.X'
df.loc[(df.lineage.str.contains(
    '|'.join(BA3))),  'WHO_Label'] = 'BA.3'
df.loc[(df.lineage.str.contains(
    '|'.join(BA4))),  'WHO_Label'] = 'BA.4'
df.loc[(df.lineage.str.contains(
    '|'.join(BA5))),  'WHO_Label'] = 'BA.5'
df.loc[(df.lineage.str.contains(
    '|'.join(BA5X))),  'WHO_Label'] = 'BA.5.X'
df.loc[(df.lineage.str.contains(
    '|'.join(Beta))),  'WHO_Label'] = 'Beta'
df.loc[(df.lineage.str.contains(
    '|'.join(Gamma))),  'WHO_Label'] = 'Gamma'
df.loc[(df.lineage.str.contains(
    '|'.join(Zeta))),  'WHO_Label'] = 'Zeta'
df.loc[(df.lineage.str.contains(
    '|'.join(Theta))),  'WHO_Label'] = 'Theta'
df.loc[(df.lineage.str.contains(
    '|'.join(Eta))),  'WHO_Label'] = 'Eta'
df.loc[(df.lineage.str.contains(
    '|'.join(Iota))),  'WHO_Label'] = 'Iota'
df.loc[(df.lineage.str.contains(
    '|'.join(Kappa))),  'WHO_Label'] = 'Kappa'
df.loc[(df.lineage.str.contains(
    '|'.join(Lambda))),  'WHO_Label'] = 'Lambda'
df.loc[(df.lineage.str.contains(
    '|'.join(Mu))),  'WHO_Label'] = 'Mu'
df.loc[(df.lineage.str.contains(
    '|'.join(Epsilon))),  'WHO_Label'] = 'Epsilon'
df.loc[(df.lineage.str.contains(
    '|'.join(Monitoring))),  'WHO_Label'] = 'Monitoring'
df.loc[(df.lineage.str.contains(
    '|'.join(Delta))),  'WHO_Label'] = 'Delta'
df.loc[~(df.lineage.str.contains(
    '|'.join(Other))),  'WHO_Label'] = 'Other'
df.loc[(df.lineage.str.contains(
    '|'.join(Unassigned))),  'WHO_Label'] = 'Unassigned'

# df.head(2)

df["date"] = pd.to_datetime(df["date"])
df["year"] = df["date"].dt.year
df["month"] = df["date"].dt.month
df['count']=1

df.columns

# df_fig = df.drop([ 'insertions', 'totalFrameShifts', 'frameShifts', 'totalMissing', 'last_vaccinated', 'missing', 'aaDeletions', 'privateNucMutations.labeledSubstitutions', 'privateNucMutations.unlabeledSubstitutions', 'scorpio_support', 'scorpio_conflict',  'month'], axis=1)

# df_fig.head(2)

def pivot_cht_html(df, outfile_path = "Lineage.html", url="",
    width="100%", height="400",json_kwargs='',  **kwargs):
  with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
      csv = df.to_csv(encoding='utf8')
      if hasattr(csv, 'decode'):
          csv = csv.decode('utf8')
      outfile.write(TEMPLATE %
            dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

  IFrame(src=url or outfile_path, width=width, height=height)
  return HTML(outfile_path)

pivot_ui(df,outfile_path='Lineage.html')
HTML('Lineage.html')

df.to_excel("Lineage.xlsx", index=False)

# df.to_csv('Lineage_old.csv', index=False)

df.to_csv('Lineage.tsv', sep="\t", index=False)

# df.to_excel("Lineage_old.xlsx", index=False)

l11 = df[df['collection_month'] == 'May-2022']
l12 = df[df['collection_month'] == 'Jun-2022']
l13 = df[df['collection_month'] == 'Jul-2022']
l14 = df[df['collection_month'] == 'Aug-2022']

recent = pd.concat([l12,l13,l14], join="inner")

# recent.to_csv('recent.tsv', sep="\t", index=False)

recent['aaSubstitutions']=recent['aaSubstitutions'].map(str)
recent['aaSubstitutions'] = recent['aaSubstitutions'].str.split(',')
mut1 = recent.explode('aaSubstitutions')
mut1 = recent.explode('aaSubstitutions')
mut1[['gene', 'aaMutations']] = mut1['aaSubstitutions'].str.split(':', expand=True)

mut2 = mut1['aaMutations'].str.split('(\d+)([A-Za-z]+)', expand=True)
mut3 = pd.concat([mut1, mut2], axis=1, join='inner')
mut3.rename(columns={0:'RefAA', 1:'Position', 2:'AltAA'}, inplace=True)
mut3.drop(3, axis=1, inplace=True)
#mut3.head(2)
mut3["Position"] = pd.to_numeric(mut3["Position"])

mut3.to_csv('recentMJJA_mutation.tsv', sep="\t", index=False)

# l10 = mut3[mut3['collection_month'] == 'May-2022']

# l10.to_csv('apr_mutation.tsv', sep="\t", index=False)

# recent.to_excel("recent.xlsx", index=False)

# def pivot_cht_html(recent, outfile_path = "recent.html", url="",
#     width="100%", height="400",json_kwargs='',  **kwargs):
#   with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
#       csv = recent.to_csv(encoding='utf8')
#       if hasattr(csv, 'decode'):
#           csv = csv.decode('utf8')
#       outfile.write(TEMPLATE %
#             dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

#   IFrame(src=url or outfile_path, width=width, height=height)
#   return HTML(outfile_path)

# pivot_ui(recent,outfile_path='recent.html')
# HTML('recent.html')

# ba_2 = mut3[mut3['lineage'] == 'BA.2']

array = ['ORF1a:S135R', 'ORF1a:T842I', 'ORF1a:K856R', 'ORF1a:G1307S', 'ORF1a:S2083I', 'ORF1a:A2710T', 'ORF1a:L3027F', 'ORF1a:T3090I', 'ORF1a:L3201F', 'ORF1a:T3255I', 'ORF1a:P3395H', 'ORF1a:I3758V',
'ORF1b:P314L', 'ORF1b:R1315C', 'ORF1b:I1566V', 'ORF1b:T2163I', 'S:T19I', 'S:L24S', 'S:del25/27', 'S:A67V', 'S:del69/70', 'S:T95I', 'S:G142D', 'S:N211I', 'S:V213G', 'S:G339D', 'S:R346K', 'S:S371F', 'S:S373P', 'S:S375F', 'S:T376A', 'S:D405N', 'S:R408S', 'S:K417N', 'S:N440K', 'S:S477N', 'S:T478K', 'S:E484A', 'S:Q493R', 'S:G496S', 'S:Q498R',
'S:N501Y', 'S:Y505H', 'S:T547K', 'S:D614G', 'S:H655Y', 'S:N679K', 'S:P681H', 'S:N764K', 'S:D796Y', 'S:N856K', 'S:Q954H', 'S:N969K', 'S:L981F', 'ORF3a:T223I', 'E:T9I', 'M:D3G', 'M:Q19E', 'M:A63T', 'ORF6:D61L', 'ORF8:S84L', 'N:P13L', 'N:R203K', 'N:G204R', 'N:S413R']
mutation2 = mut3.loc[~mut3['aaSubstitutions'].isin(array)]

mutation2.to_csv('recent_excludeOmicron.tsv', sep="\t", index=False)

mutation2.to_excel("recent_excludeOmicron.xlsx", index=False)

def pivot_cht_html(mutation2, outfile_path = "recent_excludeOmicron.html", url="",
    width="100%", height="400",json_kwargs='',  **kwargs):
  with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
      csv = mutation2.to_csv(encoding='utf8')
      if hasattr(csv, 'decode'):
          csv = csv.decode('utf8')
      outfile.write(TEMPLATE %
            dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

  IFrame(src=url or outfile_path, width=width, height=height)
  return HTML(outfile_path)

pivot_ui(mutation2,outfile_path='recent_excludeOmicron.html')
HTML('recent_excludeOmicron.html')

# array = ['ORF1a:S135R', 'ORF1a:T842I', 'ORF1a:K856R', 'ORF1a:G1307S', 'ORF1a:S2083I', 'ORF1a:A2710T', 'ORF1a:L3027F', 'ORF1a:T3090I', 'ORF1a:L3201F', 'ORF1a:T3255I', 'ORF1a:P3395H', 'ORF1a:I3758V',
# 'ORF1b:P314L', 'ORF1b:R1315C', 'ORF1b:I1566V', 'ORF1b:T2163I', 'S:T19I', 'S:L24S', 'S:del25/27', 'S:A67V', 'S:del69/70', 'S:T95I', 'S:G142D', 'S:N211I', 'S:V213G', 'S:G339D', 'S:R346K', 'S:S371F', 'S:S373P', 'S:S375F', 'S:T376A', 'S:D405N', 'S:R408S', 'S:K417N', 'S:N440K', 'S:S477N', 'S:T478K', 'S:E484A', 'S:Q493R', 'S:G496S', 'S:Q498R',
# 'S:N501Y', 'S:Y505H', 'S:T547K', 'S:D614G', 'S:H655Y', 'S:N679K', 'S:P681H', 'S:N764K', 'S:D796Y', 'S:N856K', 'S:Q954H', 'S:N969K', 'S:L981F', 'ORF3a:T223I', 'E:T9I', 'M:D3G', 'M:Q19E', 'M:A63T', 'ORF6:D61L', 'ORF8:S84L', 'N:P13L', 'N:R203K', 'N:G204R', 'N:S413R']
# mutation2 = recent.loc[~recent['aaSubstitutions'].isin(array)]

# ba1 = mut3[mut3['lineage'] == 'Unassigned']
# ba2 = mut3[mut3['lineage'] == 'BA.2.10']
# ba3 = mut3[mut3['lineage'] == 'BA.2.10.1']
# ba4 = mut3[mut3['lineage'] == 'BA.2']
# bj = pd.concat([ba1, ba2, ba3, ba4], join="inner")

array = [ 'S:V83A','S:H146Q','S:Q183E','S:V213E','S:G339H','S:R346T','S:L368I','S:V445P','S:G446S','S:V483A','S:F490V','S:G798D','S:S1003I']
mutation3 = mut3.loc[mut3['aaSubstitutions'].isin(array)]

mutation3.to_csv('BJ_3.tsv', sep="\t", index=False)

def pivot_cht_html(mutation3, outfile_path = "BJ_3.html", url="",
    width="100%", height="400",json_kwargs='',  **kwargs):
  with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
      csv = mutation3.to_csv(encoding='utf8')
      if hasattr(csv, 'decode'):
          csv = csv.decode('utf8')
      outfile.write(TEMPLATE %
            dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

  IFrame(src=url or outfile_path, width=width, height=height)
  return HTML(outfile_path)

pivot_ui(mutation3,outfile_path='BJ_3.html')
HTML('BJ_3.html')

#Special case

# BA_2_75 = recent[recent['lineage'] == 'BA.2']

# array = ['S:Q493Q', 'S:K147E', 'ORF1b:G662S', 'E:T11A', 'ORF1a:N4060S', 'ORF1a:P1640S', 'ORF1a:S1221L', 'S:G446S', 'S:F157L', 'S:N460K', 'S:G339H', 'S:G257S', 'S:I210V', 'S:W152R']
# mutation3 = recent.loc[recent['aaSubstitutions'].isin(array)]

# def pivot_cht_html(mutation3, outfile_path = "BA_2_75_mutation3_2.html", url="",
#     width="100%", height="400",json_kwargs='',  **kwargs):
#   with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
#       csv = mutation3.to_csv(encoding='utf8')
#       if hasattr(csv, 'decode'):
#           csv = csv.decode('utf8')
#       outfile.write(TEMPLATE %
#             dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

#   IFrame(src=url or outfile_path, width=width, height=height)
#   return HTML(outfile_path)

# pivot_ui(mutation3,outfile_path='BA_2_75_mutation3_2.html')
# HTML('BA_2_75_mutation3_2.html')

#mut3.to_csv('mutation_complete.csv', index=False)

# mutation1 = mut3[mut3['WHO_label'] == 'Omicron']

# mutation2.to_csv('mutation2.tsv', sep="\t", index=False)

#Omicron(BA.1, BA.1.1, BA.2)

#upload_defining_mutations
#omicron_defining = pd.read_table("/content/drive/MyDrive/Colab Notebooks/WA73_18.02.2022/omicron_defining.tsv", sep='\t')

#omicron_additional = mutation1[~mutation1['aaSubstitutions'].isin(omicron_defining["aaSubstitutions"])]

#omicron_additional.to_csv('omicron_additional_mutations.csv', index=False)

# def pivot_cht_html(mutation2, outfile_path = "Omicron_additional_mutations.html", url="",
#     width="100%", height="400",json_kwargs='',  **kwargs):
#   with io.open(outfile_path, 'wt', encoding='utf8') as outfile:
#       csv = mutation2.to_csv(encoding='utf8')
#       if hasattr(csv, 'decode'):
#           csv = csv.decode('utf8')
#       outfile.write(TEMPLATE %
#             dict(csv=csv, kwargs=json.dumps(kwargs),json_kwargs=json_kwargs))

#   IFrame(src=url or outfile_path, width=width, height=height)
#   return HTML(outfile_path)

# pivot_ui(mutation2,outfile_path='Omicron_additional_mutations.html')
# HTML('Omicron_additional_mutations.html')

#recombinant = mut3[mut3['clade'] == 'recombinant']
#recombinant.to_csv('recombinant.tsv', sep="\t", index=False)

#mutation2 = mut3[~mut3["WHO_label"].isin(['Omicron'])]


#l10 = mutation2[mutation2['collection_month'] == 'Jan-2022']
#l11 = mutation2[mutation2['collection_month'] == 'Feb-2022']

#except_omicron = pd.concat([l10,l11], join="inner")

#except_omicron.to_csv('except_omicron.tsv', sep="\t", index=False)

#none1 = except_omicron[except_omicron['WHO_label'] == 'None']
#none2 = none1[none1['collection_month'] == 'Feb-2022']

# array = ['ORF1a:S135R', 'ORF1a:T842I', 'ORF1a:K856R', 'ORF1a:G1307S', 'ORF1a:S2083I', 'ORF1a:A2710T', 'ORF1a:L3027F', 'ORF1a:T3090I', 'ORF1a:L3201F', 'ORF1a:T3255I', 'ORF1a:P3395H', 'ORF1a:I3758V',
# 'ORF1b:P314L', 'ORF1b:R1315C', 'ORF1b:I1566V', 'ORF1b:T2163I', 'S:T19I', 'S:L24S', 'S:del25/27', 'S:A67V', 'S:del69/70', 'S:T95I', 'S:G142D', 'S:N211I', 'S:V213G', 'S:G339D', 'S:R346K', 'S:S371F', 'S:S373P', 'S:S375F', 'S:T376A', 'S:D405N', 'S:R408S', 'S:K417N', 'S:N440K', 'S:S477N', 'S:T478K', 'S:E484A', 'S:Q493R', 'S:G496S', 'S:Q498R',
# 'S:N501Y', 'S:Y505H', 'S:T547K', 'S:D614G', 'S:H655Y', 'S:N679K', 'S:P681H', 'S:N764K', 'S:D796Y', 'S:N856K', 'S:Q954H', 'S:N969K', 'S:L981F', 'ORF3a:T223I', 'E:T9I', 'M:D3G', 'M:Q19E', 'M:A63T', 'ORF6:D61L', 'ORF8:S84L', 'N:P13L', 'N:R203K', 'N:G204R', 'N:S413R']
# mutation2 = mutation1.loc[~mutation1['aaSubstitutions'].isin(array)]

#mutation2 = mutation1.loc[mutation1['aaSubstitutions'].isin(array)]
#mutation2 = mutation1.loc[~mutation1['aaSubstitutions'].isin(array)]

# df1[df1['lineage'].isin(df2["lineage"])]

# #df1[~df1['lineage'].isin(df2["lineage"])]